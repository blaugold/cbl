import 'package:cbl/cbl.dart';

import '../test_binding.dart';

/// Opens a test database and registers a tear down hook to clean it up when
/// the test scope is done.
///
/// The name of the database is generated by giving [dbName] to [testDbName]
/// unless [useNameDirectly] is `true`. Then [dbName] is used directly.
///
/// The database will be created in the [tmpDir].
Future<Database> openTestDb(
  String dbName, {
  bool useNameDirectly = false,
  bool autoClose = true,
}) async {
  final db = await Database.open(
    useNameDirectly ? dbName : testDbName(dbName),
    config: DatabaseConfiguration(
      directory: tmpDir,
    ),
  );

  if (autoClose) addTearDown(db.close);

  return db;
}

extension DatabaseUtilsExtension on Database {
  /// Deletes all documents in this database and returns whether any documents
  /// where deleted.
  Future<bool> deleteAllDocuments() async {
    final resultSet =
        await query('SELECT META.id AS id').then((query) => query.execute());
    final docIds =
        resultSet.asDicts.map((result) => result['id'].asString).toList();

    final deleteAllDocuments = docIds.map((id) async {
      final document = await getDocument(id);
      return document!.delete();
    });
    await Future.wait(deleteAllDocuments);

    return docIds.isNotEmpty;
  }
}
